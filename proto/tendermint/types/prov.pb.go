// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/types/prov.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OperationType int32

const (
	OperationType_INSERT OperationType = 0
	OperationType_DELETE OperationType = 1
	OperationType_UPDATE OperationType = 2
	OperationType_SELECT OperationType = 3
)

var OperationType_name = map[int32]string{
	0: "INSERT",
	1: "DELETE",
	2: "UPDATE",
	3: "SELECT",
}

var OperationType_value = map[string]int32{
	"INSERT": 0,
	"DELETE": 1,
	"UPDATE": 2,
	"SELECT": 3,
}

func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}

func (OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_60be7e5c14028a79, []int{0}
}

type TxBody struct {
	OpType    OperationType `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=tendermint.types.OperationType" json:"op_type,omitempty"`
	Timestamp string        `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId    string        `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EntityId  string        `protobuf:"bytes,4,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Version   uint32        `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *TxBody) Reset()         { *m = TxBody{} }
func (m *TxBody) String() string { return proto.CompactTextString(m) }
func (*TxBody) ProtoMessage()    {}
func (*TxBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_60be7e5c14028a79, []int{0}
}
func (m *TxBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxBody.Merge(m, src)
}
func (m *TxBody) XXX_Size() int {
	return m.Size()
}
func (m *TxBody) XXX_DiscardUnknown() {
	xxx_messageInfo_TxBody.DiscardUnknown(m)
}

var xxx_messageInfo_TxBody proto.InternalMessageInfo

func (m *TxBody) GetOpType() OperationType {
	if m != nil {
		return m.OpType
	}
	return OperationType_INSERT
}

func (m *TxBody) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *TxBody) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TxBody) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *TxBody) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type Tx struct {
	Key    string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	TxBody *TxBody `protobuf:"bytes,2,opt,name=tx_body,json=txBody,proto3" json:"tx_body,omitempty"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_60be7e5c14028a79, []int{1}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Tx) GetTxBody() *TxBody {
	if m != nil {
		return m.TxBody
	}
	return nil
}

type VONode struct {
	Index  int64    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Hashes [][]byte `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *VONode) Reset()         { *m = VONode{} }
func (m *VONode) String() string { return proto.CompactTextString(m) }
func (*VONode) ProtoMessage()    {}
func (*VONode) Descriptor() ([]byte, []int) {
	return fileDescriptor_60be7e5c14028a79, []int{2}
}
func (m *VONode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VONode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VONode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VONode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VONode.Merge(m, src)
}
func (m *VONode) XXX_Size() int {
	return m.Size()
}
func (m *VONode) XXX_DiscardUnknown() {
	xxx_messageInfo_VONode.DiscardUnknown(m)
}

var xxx_messageInfo_VONode proto.InternalMessageInfo

func (m *VONode) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *VONode) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type VO struct {
	VONodes []*VONode `protobuf:"bytes,1,rep,name=v_o_nodes,json=vONodes,proto3" json:"v_o_nodes,omitempty"`
}

func (m *VO) Reset()         { *m = VO{} }
func (m *VO) String() string { return proto.CompactTextString(m) }
func (*VO) ProtoMessage()    {}
func (*VO) Descriptor() ([]byte, []int) {
	return fileDescriptor_60be7e5c14028a79, []int{3}
}
func (m *VO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VO.Merge(m, src)
}
func (m *VO) XXX_Size() int {
	return m.Size()
}
func (m *VO) XXX_DiscardUnknown() {
	xxx_messageInfo_VO.DiscardUnknown(m)
}

var xxx_messageInfo_VO proto.InternalMessageInfo

func (m *VO) GetVONodes() []*VONode {
	if m != nil {
		return m.VONodes
	}
	return nil
}

type Prov struct {
	Tx         *Tx    `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	VO         *VO    `protobuf:"bytes,2,opt,name=v_o,json=vO,proto3" json:"v_o,omitempty"`
	MBTreeRoot []byte `protobuf:"bytes,3,opt,name=m_b_tree_root,json=mBTreeRoot,proto3" json:"m_b_tree_root,omitempty"`
	Height     int64  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Prov) Reset()         { *m = Prov{} }
func (m *Prov) String() string { return proto.CompactTextString(m) }
func (*Prov) ProtoMessage()    {}
func (*Prov) Descriptor() ([]byte, []int) {
	return fileDescriptor_60be7e5c14028a79, []int{4}
}
func (m *Prov) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Prov) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Prov.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Prov) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prov.Merge(m, src)
}
func (m *Prov) XXX_Size() int {
	return m.Size()
}
func (m *Prov) XXX_DiscardUnknown() {
	xxx_messageInfo_Prov.DiscardUnknown(m)
}

var xxx_messageInfo_Prov proto.InternalMessageInfo

func (m *Prov) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *Prov) GetVO() *VO {
	if m != nil {
		return m.VO
	}
	return nil
}

func (m *Prov) GetMBTreeRoot() []byte {
	if m != nil {
		return m.MBTreeRoot
	}
	return nil
}

func (m *Prov) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ProvDataList struct {
	ProvDataList []*Prov `protobuf:"bytes,1,rep,name=prov_data_list,json=provDataList,proto3" json:"prov_data_list,omitempty"`
}

func (m *ProvDataList) Reset()         { *m = ProvDataList{} }
func (m *ProvDataList) String() string { return proto.CompactTextString(m) }
func (*ProvDataList) ProtoMessage()    {}
func (*ProvDataList) Descriptor() ([]byte, []int) {
	return fileDescriptor_60be7e5c14028a79, []int{5}
}
func (m *ProvDataList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProvDataList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProvDataList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProvDataList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvDataList.Merge(m, src)
}
func (m *ProvDataList) XXX_Size() int {
	return m.Size()
}
func (m *ProvDataList) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvDataList.DiscardUnknown(m)
}

var xxx_messageInfo_ProvDataList proto.InternalMessageInfo

func (m *ProvDataList) GetProvDataList() []*Prov {
	if m != nil {
		return m.ProvDataList
	}
	return nil
}

func init() {
	proto.RegisterEnum("tendermint.types.OperationType", OperationType_name, OperationType_value)
	proto.RegisterType((*TxBody)(nil), "tendermint.types.TxBody")
	proto.RegisterType((*Tx)(nil), "tendermint.types.Tx")
	proto.RegisterType((*VONode)(nil), "tendermint.types.VONode")
	proto.RegisterType((*VO)(nil), "tendermint.types.VO")
	proto.RegisterType((*Prov)(nil), "tendermint.types.Prov")
	proto.RegisterType((*ProvDataList)(nil), "tendermint.types.ProvDataList")
}

func init() { proto.RegisterFile("tendermint/types/prov.proto", fileDescriptor_60be7e5c14028a79) }

var fileDescriptor_60be7e5c14028a79 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0xda, 0xad, 0x43, 0xa6, 0x69, 0x65, 0xad, 0xaa, 0x62, 0xa9, 0xc8, 0x04, 0x0b, 0xa4,
	0x88, 0x43, 0x22, 0x0a, 0x02, 0x84, 0x90, 0x10, 0x21, 0x3e, 0x44, 0x8a, 0x9a, 0xb2, 0x35, 0x3d,
	0x70, 0x59, 0x39, 0x78, 0xd5, 0xac, 0xc0, 0x5e, 0xcb, 0x9e, 0x5a, 0xf1, 0x4f, 0x20, 0x3e, 0x85,
	0xcf, 0xe0, 0xd8, 0x23, 0x47, 0x94, 0xfc, 0x08, 0xda, 0x4d, 0x50, 0x4a, 0x9b, 0xd3, 0xbc, 0x37,
	0xcf, 0xbb, 0xf3, 0x66, 0xf5, 0x0c, 0xc7, 0x28, 0xb2, 0x44, 0x14, 0xa9, 0xcc, 0xb0, 0x8f, 0x75,
	0x2e, 0xca, 0x7e, 0x5e, 0xa8, 0xaa, 0x97, 0x17, 0x0a, 0x15, 0x75, 0x37, 0x62, 0xcf, 0x88, 0xc1,
	0x4f, 0x02, 0x4e, 0x34, 0x1f, 0xa8, 0xa4, 0xa6, 0xaf, 0xa1, 0xa9, 0x72, 0xae, 0xdb, 0x1e, 0xe9,
	0x90, 0xee, 0xc1, 0xc9, 0xc3, 0xde, 0xed, 0xcf, 0x7b, 0x93, 0x5c, 0x14, 0x31, 0x4a, 0x95, 0x45,
	0x75, 0x2e, 0x98, 0xa3, 0x72, 0x5d, 0xe9, 0x03, 0x68, 0xa1, 0x4c, 0x45, 0x89, 0x71, 0x9a, 0x7b,
	0x56, 0x87, 0x74, 0x5b, 0x6c, 0xd3, 0xa0, 0xf7, 0xa1, 0x79, 0x55, 0x8a, 0x82, 0xcb, 0xc4, 0xb3,
	0x8d, 0xe6, 0x68, 0x3a, 0x4a, 0xe8, 0x31, 0xb4, 0x44, 0x86, 0x12, 0x6b, 0x2d, 0xed, 0x18, 0xe9,
	0xde, 0xaa, 0x31, 0x4a, 0xa8, 0x07, 0xcd, 0x4a, 0x14, 0xa5, 0x54, 0x99, 0xb7, 0xdb, 0x21, 0xdd,
	0x7d, 0xf6, 0x8f, 0x06, 0x23, 0xb0, 0xa2, 0x39, 0x75, 0xc1, 0xfe, 0x2a, 0x6a, 0xe3, 0xb4, 0xc5,
	0x34, 0xa4, 0xcf, 0xa0, 0x89, 0x73, 0x3e, 0x55, 0x49, 0x6d, 0x3c, 0xec, 0x9d, 0x78, 0x77, 0xfd,
	0xaf, 0x56, 0x65, 0x0e, 0x9a, 0x1a, 0xbc, 0x04, 0xe7, 0x62, 0x72, 0xaa, 0x12, 0x41, 0x0f, 0x61,
	0x57, 0x66, 0x89, 0x98, 0x9b, 0x0b, 0x6d, 0xb6, 0x22, 0xf4, 0x08, 0x9c, 0x59, 0x5c, 0xce, 0x44,
	0xe9, 0x59, 0x1d, 0xbb, 0xdb, 0x66, 0x6b, 0x16, 0xbc, 0x01, 0xeb, 0x62, 0x42, 0x5f, 0x40, 0xab,
	0xe2, 0x8a, 0x67, 0x2a, 0x11, 0xa5, 0x47, 0x3a, 0xf6, 0xf6, 0x91, 0xab, 0x01, 0xac, 0x59, 0x99,
	0x5a, 0x06, 0xdf, 0x09, 0xec, 0x9c, 0x15, 0xaa, 0xa2, 0x8f, 0xc1, 0xc2, 0xd5, 0xbc, 0xbd, 0x93,
	0xc3, 0x6d, 0x56, 0x99, 0x85, 0x73, 0xfa, 0x04, 0xec, 0x8a, 0xab, 0xf5, 0x46, 0x87, 0xdb, 0xae,
	0x67, 0x56, 0x35, 0xa1, 0x8f, 0x60, 0x3f, 0xe5, 0x53, 0x8e, 0x85, 0x10, 0xbc, 0x50, 0x0a, 0xcd,
	0x53, 0xb7, 0x19, 0xa4, 0x83, 0xa8, 0x10, 0x82, 0x29, 0x85, 0x66, 0x19, 0x21, 0x2f, 0x67, 0x68,
	0xde, 0xda, 0x66, 0x6b, 0x16, 0x8c, 0xa1, 0xad, 0xfd, 0x0c, 0x63, 0x8c, 0xc7, 0xb2, 0x44, 0xfa,
	0x16, 0x0e, 0x74, 0x64, 0x78, 0x12, 0x63, 0xcc, 0xbf, 0xc9, 0x12, 0xd7, 0xbb, 0x1d, 0xdd, 0x1d,
	0xae, 0xcf, 0xb1, 0x76, 0x7e, 0xe3, 0xf4, 0xd3, 0x77, 0xb0, 0xff, 0x5f, 0x48, 0x28, 0x80, 0x33,
	0x3a, 0x3d, 0x0f, 0x59, 0xe4, 0x36, 0x34, 0x1e, 0x86, 0xe3, 0x30, 0x0a, 0x5d, 0xa2, 0xf1, 0xa7,
	0xb3, 0xe1, 0xfb, 0x28, 0x74, 0x2d, 0x8d, 0xcf, 0xc3, 0x71, 0xf8, 0x21, 0x72, 0xed, 0xc1, 0xc7,
	0x5f, 0x0b, 0x9f, 0x5c, 0x2f, 0x7c, 0xf2, 0x67, 0xe1, 0x93, 0x1f, 0x4b, 0xbf, 0x71, 0xbd, 0xf4,
	0x1b, 0xbf, 0x97, 0x7e, 0xe3, 0xf3, 0xab, 0x4b, 0x89, 0xb3, 0xab, 0x69, 0xef, 0x8b, 0x4a, 0xfb,
	0x37, 0x53, 0xbe, 0x81, 0x26, 0xe5, 0xfd, 0xdb, 0x7f, 0xc0, 0xd4, 0x31, 0xfd, 0xe7, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x6b, 0x76, 0x70, 0x41, 0x1c, 0x03, 0x00, 0x00,
}

func (m *TxBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintProv(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EntityId) > 0 {
		i -= len(m.EntityId)
		copy(dAtA[i:], m.EntityId)
		i = encodeVarintProv(dAtA, i, uint64(len(m.EntityId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintProv(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintProv(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x12
	}
	if m.OpType != 0 {
		i = encodeVarintProv(dAtA, i, uint64(m.OpType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxBody != nil {
		{
			size, err := m.TxBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintProv(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VONode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VONode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VONode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for iNdEx := len(m.Hashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hashes[iNdEx])
			copy(dAtA[i:], m.Hashes[iNdEx])
			i = encodeVarintProv(dAtA, i, uint64(len(m.Hashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Index != 0 {
		i = encodeVarintProv(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VONodes) > 0 {
		for iNdEx := len(m.VONodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VONodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Prov) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prov) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Prov) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintProv(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MBTreeRoot) > 0 {
		i -= len(m.MBTreeRoot)
		copy(dAtA[i:], m.MBTreeRoot)
		i = encodeVarintProv(dAtA, i, uint64(len(m.MBTreeRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VO != nil {
		{
			size, err := m.VO.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProvDataList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvDataList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProvDataList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProvDataList) > 0 {
		for iNdEx := len(m.ProvDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProvDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintProv(dAtA []byte, offset int, v uint64) int {
	offset -= sovProv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpType != 0 {
		n += 1 + sovProv(uint64(m.OpType))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovProv(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovProv(uint64(l))
	}
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovProv(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovProv(uint64(m.Version))
	}
	return n
}

func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovProv(uint64(l))
	}
	if m.TxBody != nil {
		l = m.TxBody.Size()
		n += 1 + l + sovProv(uint64(l))
	}
	return n
}

func (m *VONode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovProv(uint64(m.Index))
	}
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovProv(uint64(l))
		}
	}
	return n
}

func (m *VO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VONodes) > 0 {
		for _, e := range m.VONodes {
			l = e.Size()
			n += 1 + l + sovProv(uint64(l))
		}
	}
	return n
}

func (m *Prov) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovProv(uint64(l))
	}
	if m.VO != nil {
		l = m.VO.Size()
		n += 1 + l + sovProv(uint64(l))
	}
	l = len(m.MBTreeRoot)
	if l > 0 {
		n += 1 + l + sovProv(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovProv(uint64(m.Height))
	}
	return n
}

func (m *ProvDataList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProvDataList) > 0 {
		for _, e := range m.ProvDataList {
			l = e.Size()
			n += 1 + l + sovProv(uint64(l))
		}
	}
	return n
}

func sovProv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProv(x uint64) (n int) {
	return sovProv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= OperationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBody == nil {
				m.TxBody = &TxBody{}
			}
			if err := m.TxBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VONode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VONode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VONode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VONodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VONodes = append(m.VONodes, &VONode{})
			if err := m.VONodes[len(m.VONodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Prov) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prov: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prov: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &Tx{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VO", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VO == nil {
				m.VO = &VO{}
			}
			if err := m.VO.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MBTreeRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MBTreeRoot = append(m.MBTreeRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.MBTreeRoot == nil {
				m.MBTreeRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvDataList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvDataList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvDataList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvDataList = append(m.ProvDataList, &Prov{})
			if err := m.ProvDataList[len(m.ProvDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProv = fmt.Errorf("proto: unexpected end of group")
)
